// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/client_link.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/client_link.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cli {

namespace {

const ::google::protobuf::Descriptor* UserAuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuthRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuthRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseConnection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fclient_5flink_2eproto() {
  protobuf_AddDesc_proto_2fclient_5flink_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/client_link.proto");
  GOOGLE_CHECK(file != NULL);
  UserAuthReq_descriptor_ = file->message_type(0);
  static const int UserAuthReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthReq, token_),
  };
  UserAuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuthReq_descriptor_,
      UserAuthReq::default_instance_,
      UserAuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuthReq));
  UserAuthRsp_descriptor_ = file->message_type(1);
  static const int UserAuthRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthRsp, user_id_),
  };
  UserAuthRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuthRsp_descriptor_,
      UserAuthRsp::default_instance_,
      UserAuthRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuthRsp));
  CloseConnection_descriptor_ = file->message_type(2);
  static const int CloseConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnection, error_code_),
  };
  CloseConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseConnection_descriptor_,
      CloseConnection::default_instance_,
      CloseConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseConnection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fclient_5flink_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuthReq_descriptor_, &UserAuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuthRsp_descriptor_, &UserAuthRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseConnection_descriptor_, &CloseConnection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fclient_5flink_2eproto() {
  delete UserAuthReq::default_instance_;
  delete UserAuthReq_reflection_;
  delete UserAuthRsp::default_instance_;
  delete UserAuthRsp_reflection_;
  delete CloseConnection::default_instance_;
  delete CloseConnection_reflection_;
}

void protobuf_AddDesc_proto_2fclient_5flink_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027proto/client_link.proto\022\003cli\"\034\n\013UserAu"
    "thReq\022\r\n\005token\030\001 \002(\004\"\036\n\013UserAuthRsp\022\017\n\007u"
    "ser_id\030\001 \002(\r\"%\n\017CloseConnection\022\022\n\nerror"
    "_code\030\001 \002(\r", 131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/client_link.proto", &protobuf_RegisterTypes);
  UserAuthReq::default_instance_ = new UserAuthReq();
  UserAuthRsp::default_instance_ = new UserAuthRsp();
  CloseConnection::default_instance_ = new CloseConnection();
  UserAuthReq::default_instance_->InitAsDefaultInstance();
  UserAuthRsp::default_instance_->InitAsDefaultInstance();
  CloseConnection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fclient_5flink_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fclient_5flink_2eproto {
  StaticDescriptorInitializer_proto_2fclient_5flink_2eproto() {
    protobuf_AddDesc_proto_2fclient_5flink_2eproto();
  }
} static_descriptor_initializer_proto_2fclient_5flink_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserAuthReq::kTokenFieldNumber;
#endif  // !_MSC_VER

UserAuthReq::UserAuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cli.UserAuthReq)
}

void UserAuthReq::InitAsDefaultInstance() {
}

UserAuthReq::UserAuthReq(const UserAuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cli.UserAuthReq)
}

void UserAuthReq::SharedCtor() {
  _cached_size_ = 0;
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuthReq::~UserAuthReq() {
  // @@protoc_insertion_point(destructor:cli.UserAuthReq)
  SharedDtor();
}

void UserAuthReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuthReq_descriptor_;
}

const UserAuthReq& UserAuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fclient_5flink_2eproto();
  return *default_instance_;
}

UserAuthReq* UserAuthReq::default_instance_ = NULL;

UserAuthReq* UserAuthReq::New() const {
  return new UserAuthReq;
}

void UserAuthReq::Clear() {
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cli.UserAuthReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 token = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cli.UserAuthReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cli.UserAuthReq)
  return false;
#undef DO_
}

void UserAuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cli.UserAuthReq)
  // required uint64 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cli.UserAuthReq)
}

::google::protobuf::uint8* UserAuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cli.UserAuthReq)
  // required uint64 token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cli.UserAuthReq)
  return target;
}

int UserAuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuthReq::MergeFrom(const UserAuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuthReq::CopyFrom(const UserAuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserAuthReq::Swap(UserAuthReq* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuthReq_descriptor_;
  metadata.reflection = UserAuthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAuthRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserAuthRsp::UserAuthRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cli.UserAuthRsp)
}

void UserAuthRsp::InitAsDefaultInstance() {
}

UserAuthRsp::UserAuthRsp(const UserAuthRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cli.UserAuthRsp)
}

void UserAuthRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuthRsp::~UserAuthRsp() {
  // @@protoc_insertion_point(destructor:cli.UserAuthRsp)
  SharedDtor();
}

void UserAuthRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAuthRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAuthRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuthRsp_descriptor_;
}

const UserAuthRsp& UserAuthRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fclient_5flink_2eproto();
  return *default_instance_;
}

UserAuthRsp* UserAuthRsp::default_instance_ = NULL;

UserAuthRsp* UserAuthRsp::New() const {
  return new UserAuthRsp;
}

void UserAuthRsp::Clear() {
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuthRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cli.UserAuthRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cli.UserAuthRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cli.UserAuthRsp)
  return false;
#undef DO_
}

void UserAuthRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cli.UserAuthRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cli.UserAuthRsp)
}

::google::protobuf::uint8* UserAuthRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cli.UserAuthRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cli.UserAuthRsp)
  return target;
}

int UserAuthRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAuthRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuthRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuthRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuthRsp::MergeFrom(const UserAuthRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuthRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuthRsp::CopyFrom(const UserAuthRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuthRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserAuthRsp::Swap(UserAuthRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuthRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuthRsp_descriptor_;
  metadata.reflection = UserAuthRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseConnection::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CloseConnection::CloseConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cli.CloseConnection)
}

void CloseConnection::InitAsDefaultInstance() {
}

CloseConnection::CloseConnection(const CloseConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cli.CloseConnection)
}

void CloseConnection::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseConnection::~CloseConnection() {
  // @@protoc_insertion_point(destructor:cli.CloseConnection)
  SharedDtor();
}

void CloseConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseConnection_descriptor_;
}

const CloseConnection& CloseConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fclient_5flink_2eproto();
  return *default_instance_;
}

CloseConnection* CloseConnection::default_instance_ = NULL;

CloseConnection* CloseConnection::New() const {
  return new CloseConnection;
}

void CloseConnection::Clear() {
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cli.CloseConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cli.CloseConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cli.CloseConnection)
  return false;
#undef DO_
}

void CloseConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cli.CloseConnection)
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cli.CloseConnection)
}

::google::protobuf::uint8* CloseConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cli.CloseConnection)
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cli.CloseConnection)
  return target;
}

int CloseConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseConnection::MergeFrom(const CloseConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseConnection::CopyFrom(const CloseConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CloseConnection::Swap(CloseConnection* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseConnection_descriptor_;
  metadata.reflection = CloseConnection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cli

// @@protoc_insertion_point(global_scope)
