// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/client_logic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/client_logic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cli {

namespace {

const ::google::protobuf::Descriptor* UserEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLeaveReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fclient_5flogic_2eproto() {
  protobuf_AddDesc_proto_2fclient_5flogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/client_logic.proto");
  GOOGLE_CHECK(file != NULL);
  UserEnterReq_descriptor_ = file->message_type(0);
  static const int UserEnterReq_offsets_[1] = {
  };
  UserEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserEnterReq_descriptor_,
      UserEnterReq::default_instance_,
      UserEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserEnterReq));
  UserEnterRsp_descriptor_ = file->message_type(1);
  static const int UserEnterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterRsp, user_id_),
  };
  UserEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserEnterRsp_descriptor_,
      UserEnterRsp::default_instance_,
      UserEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserEnterRsp));
  UserLeaveReq_descriptor_ = file->message_type(2);
  static const int UserLeaveReq_offsets_[1] = {
  };
  UserLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLeaveReq_descriptor_,
      UserLeaveReq::default_instance_,
      UserLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLeaveReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fclient_5flogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserEnterReq_descriptor_, &UserEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserEnterRsp_descriptor_, &UserEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLeaveReq_descriptor_, &UserLeaveReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fclient_5flogic_2eproto() {
  delete UserEnterReq::default_instance_;
  delete UserEnterReq_reflection_;
  delete UserEnterRsp::default_instance_;
  delete UserEnterRsp_reflection_;
  delete UserLeaveReq::default_instance_;
  delete UserLeaveReq_reflection_;
}

void protobuf_AddDesc_proto_2fclient_5flogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030proto/client_logic.proto\022\003cli\"\016\n\014UserE"
    "nterReq\"\037\n\014UserEnterRsp\022\017\n\007user_id\030\001 \002(\r"
    "\"\016\n\014UserLeaveReq", 96);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/client_logic.proto", &protobuf_RegisterTypes);
  UserEnterReq::default_instance_ = new UserEnterReq();
  UserEnterRsp::default_instance_ = new UserEnterRsp();
  UserLeaveReq::default_instance_ = new UserLeaveReq();
  UserEnterReq::default_instance_->InitAsDefaultInstance();
  UserEnterRsp::default_instance_->InitAsDefaultInstance();
  UserLeaveReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fclient_5flogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fclient_5flogic_2eproto {
  StaticDescriptorInitializer_proto_2fclient_5flogic_2eproto() {
    protobuf_AddDesc_proto_2fclient_5flogic_2eproto();
  }
} static_descriptor_initializer_proto_2fclient_5flogic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserEnterReq::UserEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cli.UserEnterReq)
}

void UserEnterReq::InitAsDefaultInstance() {
}

UserEnterReq::UserEnterReq(const UserEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cli.UserEnterReq)
}

void UserEnterReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEnterReq::~UserEnterReq() {
  // @@protoc_insertion_point(destructor:cli.UserEnterReq)
  SharedDtor();
}

void UserEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserEnterReq_descriptor_;
}

const UserEnterReq& UserEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fclient_5flogic_2eproto();
  return *default_instance_;
}

UserEnterReq* UserEnterReq::default_instance_ = NULL;

UserEnterReq* UserEnterReq::New() const {
  return new UserEnterReq;
}

void UserEnterReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cli.UserEnterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cli.UserEnterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cli.UserEnterReq)
  return false;
#undef DO_
}

void UserEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cli.UserEnterReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cli.UserEnterReq)
}

::google::protobuf::uint8* UserEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cli.UserEnterReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cli.UserEnterReq)
  return target;
}

int UserEnterReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserEnterReq::MergeFrom(const UserEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEnterReq::CopyFrom(const UserEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEnterReq::IsInitialized() const {

  return true;
}

void UserEnterReq::Swap(UserEnterReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserEnterReq_descriptor_;
  metadata.reflection = UserEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserEnterRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserEnterRsp::UserEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cli.UserEnterRsp)
}

void UserEnterRsp::InitAsDefaultInstance() {
}

UserEnterRsp::UserEnterRsp(const UserEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cli.UserEnterRsp)
}

void UserEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEnterRsp::~UserEnterRsp() {
  // @@protoc_insertion_point(destructor:cli.UserEnterRsp)
  SharedDtor();
}

void UserEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserEnterRsp_descriptor_;
}

const UserEnterRsp& UserEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fclient_5flogic_2eproto();
  return *default_instance_;
}

UserEnterRsp* UserEnterRsp::default_instance_ = NULL;

UserEnterRsp* UserEnterRsp::New() const {
  return new UserEnterRsp;
}

void UserEnterRsp::Clear() {
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cli.UserEnterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cli.UserEnterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cli.UserEnterRsp)
  return false;
#undef DO_
}

void UserEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cli.UserEnterRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cli.UserEnterRsp)
}

::google::protobuf::uint8* UserEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cli.UserEnterRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cli.UserEnterRsp)
  return target;
}

int UserEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserEnterRsp::MergeFrom(const UserEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEnterRsp::CopyFrom(const UserEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserEnterRsp::Swap(UserEnterRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserEnterRsp_descriptor_;
  metadata.reflection = UserEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLeaveReq::UserLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cli.UserLeaveReq)
}

void UserLeaveReq::InitAsDefaultInstance() {
}

UserLeaveReq::UserLeaveReq(const UserLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cli.UserLeaveReq)
}

void UserLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLeaveReq::~UserLeaveReq() {
  // @@protoc_insertion_point(destructor:cli.UserLeaveReq)
  SharedDtor();
}

void UserLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLeaveReq_descriptor_;
}

const UserLeaveReq& UserLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fclient_5flogic_2eproto();
  return *default_instance_;
}

UserLeaveReq* UserLeaveReq::default_instance_ = NULL;

UserLeaveReq* UserLeaveReq::New() const {
  return new UserLeaveReq;
}

void UserLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cli.UserLeaveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cli.UserLeaveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cli.UserLeaveReq)
  return false;
#undef DO_
}

void UserLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cli.UserLeaveReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cli.UserLeaveReq)
}

::google::protobuf::uint8* UserLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cli.UserLeaveReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cli.UserLeaveReq)
  return target;
}

int UserLeaveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLeaveReq::MergeFrom(const UserLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLeaveReq::CopyFrom(const UserLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeaveReq::IsInitialized() const {

  return true;
}

void UserLeaveReq::Swap(UserLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLeaveReq_descriptor_;
  metadata.reflection = UserLeaveReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cli

// @@protoc_insertion_point(global_scope)
